from contextlib import asynccontextmanager
from typing import Any, AsyncGenerator, Union

import asyncpg

from .settings import settings


class AsyncPostgresDB:
    """Conexão com o banco de dados Mysql"""

    # __instance = None
    __session_pool: Union[asyncpg.Pool, None] = None
    __dsn = settings.DATABASE_URL

    # def __new__(cls):
    #     if cls.__instance is None:
    #         cls.__instance = super(AsyncPostgresDB, cls).__new__(cls)

    #     return cls.__instance

    async def init_pool(self, min_size=1, max_size=10):
        if self.__session_pool is None:
            self.__session_pool = await asyncpg.create_pool(self.__dsn, min_size=min_size, max_size=max_size)

    @asynccontextmanager
    async def connection(self) -> AsyncGenerator[asyncpg.Connection, None]:
        if self.__session_pool is None:
            await self.init_pool()

        async with self.__session_pool.acquire() as conn:
            yield conn

    async def close(self):
        if self.__session_pool:
            await self.__session_pool.close()
            self.__session_pool = None

    async def create_table(self):
        if self.__session_pool and self.__instance:
            try:
                await self.__session_pool.execute(
                    """CREATE TABLE IF NOT EXISTS "payments" (
                        "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
                        "correlation_id" VARCHAR(255) NOT NULL UNIQUE,
                        "amount" NUMERIC NOT NULL,
                        "was_processed" BOOLEAN NOT NULL,
                        "process_type" SMALLINT DEFAULT 0,
                        "requested_at" TIMESTAMP NOT NULL DEFAULT now(),
                        PRIMARY KEY("id")
                    );"""
                )

                await self.__session_pool.execute(
                    """CREATE INDEX IF NOT EXISTS "idx_pagamento_consulta" 
                        ON "payments" ("requested_at", "process_type", "was_processed");
                    """
                )
            except asyncpg.exceptions.UniqueViolationError:
                print("Índice já existe, ignorando.")
