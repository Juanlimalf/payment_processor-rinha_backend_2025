x-services-template:
  api:
    # image: juanlimalf/api-payment_processor-rinha_backend_2025
    &api
    build:
      context: ./api
      dockerfile: Dockerfile
    volumes:
      - ./api:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --loop uvloop --http httptools --workers 1 --no-access-log
    depends_on:
      - postgres
      - pgbouncer
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://postgres:postgres@pgbouncer:5432/postgres
      - PAYMENT_PROCESSOR_DEFAULT=http://payment-processor-default:8080
      - PAYMENT_PROCESSOR_FALLBACK=http://payment-processor-fallback:8080
    networks:
      - api
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 50M
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://0.0.0.0:8000" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  worker:
    # image: juanlimalf/worker-payment_processor-rinha_backend_2025
    &worker
    build:
      context: ./worker
      dockerfile: Dockerfile
    volumes:
      - ./worker:/app
    command: python main.py
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - PAYMENT_PROCESSOR_DEFAULT=http://payment-processor-default:8080
      - PAYMENT_PROCESSOR_FALLBACK=http://payment-processor-fallback:8080
    networks:
      - api
      - payment-processor
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
      api2:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 50M

services:
  api:
    <<: *api
    container_name: api

  api2:
    <<: *api
    container_name: api2

  worker:
    <<: *worker
    container_name: worker

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "9999:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - api
    depends_on:
      api:
        condition: service_healthy
      api2:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 30M

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    networks:
      - api
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 70M
    command: postgres -c max_connections=20 -c shared_buffers=16MB -c work_mem=1MB -c maintenance_work_mem=16MB -c temp_buffers=1MB -c wal_level=minimal -c max_wal_senders=0 -c checkpoint_timeout=30min -c max_wal_size=1GB -c checkpoint_completion_target=0.9 -c synchronous_commit=off -c jit=off -c autovacuum=on -c autovacuum_naptime=60s -c autovacuum_vacuum_scale_factor=0.2 -c autovacuum_analyze_scale_factor=0.1 -c log_min_duration_statement=500ms -c log_checkpoints=off -c log_autovacuum_min_duration=-1

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      POOL_MODE: transaction
      AUTH_TYPE: scram-sha-256
      MAX_CLIENT_CONN: 300
      DEFAULT_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 2
      SERVER_RESET_QUERY: "DISCARD ALL"
      IGNORE_STARTUP_PARAMETERS: "extra_float_digits"
      IDLE_TRANSACTION_TIMEOUT: "15"
      QUERY_TIMEOUT: "60"
    ports:
      - "6432:6432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 10M

networks:
  api:
    driver: bridge
  payment-processor:
    external: true
